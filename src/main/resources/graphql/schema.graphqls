type User {
    id: ID!
    firstName: String
    lastName: String
    username: String
    email: String
    password: String
    userSince: String
    score: Int
    imgUrl: String
    isVerified: Boolean
    isDeleted: Boolean
    isBanned: Boolean
    isActive: Boolean
    isAdmin: Boolean
    isPremium: Boolean
    isTrial: Boolean
    isTrialExpired: Boolean
    isTrialActive: Boolean
    refreshToken: String
}

type Question {
    qid: ID!
    title: String!
    desc: String
    tags: [String!]!
    likes: Int
    dislikes: Int
    difficulty: String
    starting: String
    ending: String
    code: String
    constraints: [String!]
    titleSlug: String
    solutions: [Solution!]
    examples: [Example!]
    tests: [Test!]
}

type Challenge {
    cid: ID!
    pid: String!
    status: String!
    startDate: String
    endDate: String
    participants: [Participant!]
}

type Participant {
    username: String!
    cid: ID!
    rank: Int
    score: Int!
    time: String!
}

type UserChallengeHistory {
    cid: ID!
    pid: String!
    status: String!
    startDate: String
    endDate: String
    userScore: Int!
    userRank: Int
    participationTime: String!
}

type Solution {
    qid: ID!
    id: ID!
    java: String
    time: String
    space: String
    approach: String
}

type Example {
    id: ID!
    qid: ID!
    test: String
    expectedOutput: String
}

type Test {
    id: ID!
    qid: ID!
    test: String
    expectedOutput: String
}

input UserInput {
    firstName: String
    lastName: String
    username: String
    email: String
    password: String
}

input LoginRequest {
    username: String!
    password: String!
}

input SolutionInput {
    qid: ID!
    id: ID!
    java: String
    time: String
    space: String
    approach: String
}

input ExampleInput {
    qid: ID!
    test: String
    expectedOutput: String
}

input TestInput {
    qid: ID!
    test: String
    expectedOutput: String
}

input ParticipantScoreInput {
    username: String!
    score: Int!
    rank: Int!
}

type AuthResponse {
    accessToken: String!
    refreshToken: String!
}

type Query {
    getAllUsers: [User!]!
    getUserById(id: ID!): User
    getUserByUsername(username: String!): User
    getAllQuestions: [Question!]!
    getQuestionById(id: ID!): Question
    getQuestionByTitleSlug(titleSlug: String!): Question
    getSolutionsByQuestionId(qid: ID!): [Solution!]!
    getExamplesByQuestionId(qid: ID!): [Example!]!
    getTestsByQuestionId(qid: ID!): [Test!]!
    getAllChallenges: [Challenge!]!
    getChallengeById(cid: ID!): Challenge
    getOpenChallenges: [Challenge!]!
    getParticipantsByChallengeId(cid: ID!): [Participant!]!
    getParticipantsByUsername(username: String!): [Participant!]!
    isParticipantInChallenge(cid: ID!, username: String!): Boolean!
    getUserChallengeHistory(username: String!): [UserChallengeHistory!]!
}

 type Mutation {
     register(user: UserInput!): User!
     updateUser(id: ID!, user: UserInput!): User!
     login(loginRequest: LoginRequest!): AuthResponse!
     createSolution(solution: SolutionInput!): Solution!
     updateSolution(solution: SolutionInput!): Solution!
     deleteSolution(qid: ID!, id: ID!): Boolean!
     createExample(example: ExampleInput!): Example!
     updateExample(example: ExampleInput!): Example!
     deleteExample(id: ID!): Boolean!
     createTest(test: TestInput!): Test!
     updateTest(test: TestInput!): Test!
     deleteTest(id: ID!): Boolean!
     createChallenge(pid: String!): Challenge!
     findOrCreateLobby(username: String!): Challenge!
     startChallenge(cid: ID!): Challenge!
     joinChallenge(cid: ID!, username: String!): Participant!
     endChallenge(cid: ID!, participantScores: [ParticipantScoreInput!]!): Challenge!
 }

