type User {
    id: ID!
    firstName: String
    lastName: String
    username: String
    email: String
    password: String
    userSince: String
    score: Int
    imgUrl: String
    isVerified: Boolean
    isDeleted: Boolean
    isBanned: Boolean
    isActive: Boolean
    isAdmin: Boolean
    isPremium: Boolean
    isTrial: Boolean
    isTrialExpired: Boolean
    isTrialActive: Boolean
    refreshToken: String
}

type Question {
    qid: ID!
    title: String!
    desc: String
    tags: [String!]!
    likes: Int
    dislikes: Int
    difficulty: String
    examples: String
    tests: String
    starting: String
    ending: String
    solutions: String
    code: String
    constraints: [String!]
    titleSlug: String
}

input UserInput {
    firstName: String
    lastName: String
    username: String
    email: String
    password: String
}

input LoginRequest {
    username: String!
    password: String!
}

type AuthResponse {
    accessToken: String!
    refreshToken: String!
}

type Query {
    getAllUsers: [User!]!
    getUserById(id: ID!): User
    getUserByUsername(username: String!): User
    getAllQuestions: [Question!]!
    getQuestionById(id: ID!): Question
    getQuestionByTitleSlug(titleSlug: String!): Question
}

type Mutation {
    register(user: UserInput!): User!
    updateUser(id: ID!, user: UserInput!): User!
    login(loginRequest: LoginRequest!): AuthResponse!
} 